/*!
 * Variations Plugin
 */
;(function ( $, window, document, undefined ) {

	var temp=1;
	/**
	 * Variations form handling
	 */
	var clicked_radio='';
	$('form.variations_form')

		// On clicking the reset variation button
		.on('click','.reset_variations', function( event ) {
     
			//$(this).closest('form.variations_form').find('.variations input:radio').val('').change();
			//$(this).find('.variations input:radio:checked').each( function() {
				//$(this).checked = false;
			//}
			return false;
		} )

		// Upon changing an option
		.on( 'change', '.variations input:radio', function(event) {
			
			$variation_form = $(this).closest('form.variations_form');
			$variation_form.find('input[name=variation_id]').val('').change();
		
		
				 
			$variation_form
				.trigger( 'woocommerce_variation_radio_change' )
				.trigger( 'check_variations', [ '', false ] );
		
			
			$(this).blur();

			return matching;
		};

		$.fn.wc_variation_form.variations_match = function( attrs1, attrs2 ) {
			var match = true;

			for ( var attr_name in attrs1 ) {
				if ( attrs1.hasOwnProperty( attr_name ) ) {
					var val1 = attrs1[ attr_name ];
					var val2 = attrs2[ attr_name ];

					if ( val1 !== undefined && val2 !== undefined && val1.length !== 0 && val2.length !== 0 && val1 !== val2 ) {
						match = false;
					}
				}
			}

			return match;
		};

		// Unbind any existing events
		this.unbind( 'check_variations update_variation_values found_variation' );
		this.find( '.reset_variations' ).unbind( 'click' );
		this.find( '.variations select' ).unbind( 'change focusin' );

				clicked_radio=$(this).val()+'/'+$(this).attr('name');
					console.log(clicked_radio);
				
			$variation_form = $(this).closest('form.variations_form');
				} else {

					$variation_form.trigger( 'update_variation_values', [ matching_variations ] );

					if ( ! focus )
						$variation_form.trigger( 'reset_image' );

					if ( ! exclude ) {
						$variation_form.find( '.single_variation_wrap' ).slideUp( 200 );
					}

				}

				if ( any_set ) {

					if ( $reset_variations.css( 'visibility' ) === 'hidden' )
						$reset_variations.css( 'visibility', 'visible' ).hide().fadeIn();

				} else {

					$reset_variations.css( 'visibility', 'hidden' );

				}

			} )

			var product_id			= parseInt( $variation_form.attr( 'data-product_id' ) );
			var all_variations		= window[ "product_variations_" + product_id ];
			
		
			
			// Fallback
			if ( ! all_variations ) 
				all_variations = window[ "product_variations" ];
			
			
		
	/*
			var k=1;
			
			console.log(current_settings);
		   $('input[type="radio"]').not('[name="attribute_color"]').attr('disabled','disabled');
			 
			  for (var key in current_settings) 
				{
					 
					 
						 for (var i = 0; i < all_variations.length; i++) 
				       {
						
								  if(current_settings[key].toLowerCase()==all_variations[i].attributes[key].toLowerCase())
						       {
						         $('input[value='+(current_settings[key]).toUpperCase()+'][type="radio"]').removeProp('disabled');	 
			             }
						   }
				       
				 }
			
		*/	
	        var matching_variations = find_matching_variations(all_variations, current_settings );
				
				 if(matching_variations.length)
				 {
					 $('.hideform').show().fadeIn(1000);
					 
				 }
				 else
				 {
					 
					 $('.hideform').hide().slideUp(1000);
				}
					
	       


				var $product = $(this).closest( '.product' ),
					$product_img = $product.find( 'div.images img:eq(0)' ),
					$product_link = $product.find( 'div.images a.zoom:eq(0)' ),
					o_src = $product_img.attr( 'data-o_src' ),
					o_title = $product_img.attr( 'data-o_title' ),
					o_alt = $product_img.attr( 'data-o_alt' ),
					o_href = $product_link.attr( 'data-o_href' );

				if ( o_src !== undefined ) {
					$product_img
						.attr( 'src', o_src );
				}

				if ( o_href !== undefined ) {
					$product_link
						.attr( 'href', o_href );
				}

				if ( o_title !== undefined ) {
					$product_img
						.attr( 'title', o_title );
					$product_link
						.attr( 'title', o_title );
				}

				if ( o_alt !== undefined ) {
					$product_img
						.attr( 'alt', o_alt );
				}
			} )

			// Disable option fields that are unavaiable for current set of attributes
			.on( 'update_variation_values', function( event, variations ) {

				$variation_form = $( this ).closest( '.variations_form' );

				// Loop through selects and disable/enable options based on selections
				$variation_form.find( '.variations select' ).each( function( index, el ) {

					current_attr_select = $( el );

					// Reset options
					if ( ! current_attr_select.data( 'attribute_options' ) )
						current_attr_select.data( 'attribute_options', current_attr_select.find( 'option:gt(0)' ).get() );

					current_attr_select.find( 'option:gt(0)' ).remove();
					current_attr_select.append( current_attr_select.data( 'attribute_options' ) );
					current_attr_select.find( 'option:gt(0)' ).removeClass( 'active' );

					// Get name
					var current_attr_name = current_attr_select.attr( 'name' );

					// Loop through variations
					for ( var num in variations ) {

						if ( typeof( variations[ num ] ) != 'undefined' ) {

							var attributes = variations[ num ].attributes;

							for ( var attr_name in attributes ) {
								if ( attributes.hasOwnProperty( attr_name ) ) {
									var attr_val = attributes[ attr_name ];

									if ( attr_name == current_attr_name ) {

										if ( attr_val ) {

											// Decode entities
											attr_val = $( '<div/>' ).html( attr_val ).text();

											// Add slashes
											attr_val = attr_val.replace( /'/g, "\\'" );
											attr_val = attr_val.replace( /"/g, "\\\"" );

		})
										} else {

											current_attr_select.find( 'option:gt(0)' ).addClass( 'active' );

										}
									}
								}
							}
						}
					}

					// Detach inactive
					current_attr_select.find( 'option:gt(0):not(.active)' ).remove();

				});

				// Custom event for when variations have been updated
				$variation_form.trigger( 'woocommerce_update_variation_values' );

			} )

			// Show single variation details (price, stock, image)
			.on( 'found_variation', function( event, variation ) {
				var $variation_form = $( this ),
					$product = $( this ).closest( '.product' ),
					$product_img = $product.find( 'div.images img:eq(0)' ),
					$product_link = $product.find( 'div.images a.zoom:eq(0)' ),
					o_src = $product_img.attr( 'data-o_src' ),
					o_title = $product_img.attr( 'data-o_title' ),
					o_alt = $product_img.attr( 'data-o_alt' ),
					o_href = $product_link.attr( 'data-o_href' ),
					variation_image = variation.image_src,
					variation_link  = variation.image_link,
					variation_title = variation.image_title,
					variation_alt = variation.image_alt;

				$variation_form.find( '.variations_button' ).show();
				$variation_form.find( '.single_variation' ).html( variation.price_html + variation.availability_html );

				if ( o_src === undefined ) {
					o_src = ( ! $product_img.attr( 'src' ) ) ? '' : $product_img.attr( 'src' );
					$product_img.attr( 'data-o_src', o_src );
				}

				if ( o_href === undefined ) {
					o_href = ( ! $product_link.attr( 'href' ) ) ? '' : $product_link.attr( 'href' );
					$product_link.attr( 'data-o_href', o_href );
				}

				if ( o_title === undefined ) {
					o_title = ( ! $product_img.attr( 'title' ) ) ? '' : $product_img.attr( 'title' );
					$product_img.attr( 'data-o_title', o_title );
				}

				if ( o_alt === undefined ) {
					o_alt = ( ! $product_img.attr( 'alt' ) ) ? '' : $product_img.attr( 'alt' );
					$product_img.attr( 'data-o_alt', o_alt );
				}

				if ( variation_image && variation_image.length > 1 ) {
					$product_img
						.attr( 'src', variation_image )
						.attr( 'alt', variation_alt )
						.attr( 'title', variation_title );
					$product_link
						.attr( 'href', variation_link )
						.attr( 'title', variation_title );
				} else {
					$product_img
						.attr( 'src', o_src )
						.attr( 'alt', o_alt )
						.attr( 'title', o_title );
					$product_link
						.attr( 'href', o_href )
						.attr( 'title', o_title );
				}

				var $single_variation_wrap = $variation_form.find( '.single_variation_wrap' ),
					$sku = $product.find( '.product_meta' ).find( '.sku' ),
					$weight = $product.find( '.product_weight' ),
					$dimensions = $product.find( '.product_dimensions' );

				if ( ! $sku.attr( 'data-o_sku' ) )
					$sku.attr( 'data-o_sku', $sku.text() );

				if ( ! $weight.attr( 'data-o_weight' ) )
					$weight.attr( 'data-o_weight', $weight.text() );

				if ( ! $dimensions.attr( 'data-o_dimensions' ) )
					$dimensions.attr( 'data-o_dimensions', $dimensions.text() );

				if ( variation.sku ) {
					$sku.text( variation.sku );
				} else {
					$sku.text( $sku.attr( 'data-o_sku' ) );
				}

				if ( variation.weight ) {
					$weight.text( variation.weight );
				} else {
					$weight.text( $weight.attr( 'data-o_weight' ) );
				}

				if ( variation.dimensions ) {
					$dimensions.text( variation.dimensions );
				} else {
					$dimensions.text( $dimensions.attr( 'data-o_dimensions' ) );
				}

				$single_variation_wrap.find( '.quantity' ).show();

				if ( ! variation.is_purchasable || ! variation.is_in_stock || ! variation.variation_is_visible ) {
					$variation_form.find( '.variations_button' ).hide();
				}

				if ( ! variation.variation_is_visible ) {
					$variation_form.find( '.single_variation' ).html( '<p>' + wc_add_to_cart_variation_params.i18n_unavailable_text + '</p>' );
				}

				if ( variation.min_qty )
					$single_variation_wrap.find( 'input[name=quantity]' ).attr( 'min', variation.min_qty ).val( variation.min_qty );
				else
					$single_variation_wrap.find( 'input[name=quantity]' ).removeAttr( 'min' );

				if ( variation.max_qty )
					$single_variation_wrap.find( 'input[name=quantity]' ).attr( 'max', variation.max_qty );
				else
					$single_variation_wrap.find( 'input[name=quantity]' ).removeAttr( 'max' );

				if ( variation.is_sold_individually === 'yes' ) {
					$single_variation_wrap.find( 'input[name=quantity]' ).val( '1' );
					$single_variation_wrap.find( '.quantity' ).hide();
				}

				$single_variation_wrap.slideDown( 200 ).trigger( 'show_variation', [ variation ] );

			});

		$form.trigger( 'wc_variation_form' );

		return $form;
	};

	$( function() {

		// wc_add_to_cart_variation_params is required to continue, ensure the object exists
		if ( typeof wc_add_to_cart_variation_params === 'undefined' )
			return false;

		$( '.variations_form' ).wc_variation_form();
		$( '.variations_form .variations select' ).change();
	});


		// Show single variation details (price, stock, image)
		.on( 'found_variation', function( event, variation ) {
	      	var $variation_form = $(this);
	       
	        var $product 		= $(this).closest( '.product' );
			var $product_img 	= $product.find( 'div.images img:eq(0)' );
			var $product_link 	= $product.find( 'div.images a.zoom:eq(0)' );
		
			var o_src 			= $product_img.attr('data-o_src');
			var o_title 		= $product_img.attr('data-o_title');
	        var o_href 			= $product_link.attr('data-o_href');

	        var variation_image = variation.image_src;
	        var variation_link = variation.image_link;
			var variation_title = variation.image_title;

			$variation_form.find('.variations_button').show();
	        $variation_form.find('.single_variation').html( variation.price_html + variation.availability_html );

	        if ( ! o_src ) {
	        	o_src = ( ! $product_img.attr('src') ) ? '' : $product_img.attr('src');
	            $product_img.attr('data-o_src', o_src );
	        }

	        if ( ! o_href ) {
	        	o_href = ( ! $product_link.attr('href') ) ? '' : $product_link.attr('href');
	            $product_link.attr('data-o_href', o_href );
	        }

	        if ( ! o_title ) {
	        	o_title = ( ! $product_img.attr('title') ) ? '' : $product_img.attr('title');
	            $product_img.attr('data-o_title', o_title );
	        }

	        if ( variation_image && variation_image.length > 1 ) {
	            $product_img
	            	.attr( 'src', variation_image )
	            	.attr( 'alt', variation_title )
	            	.attr( 'title', variation_title );
	            $product_link
	            	.attr( 'href', variation_link );
	        } else {
	            $product_img
	            	.attr( 'src', o_src )
	            	.attr( 'alt', o_title )
	            	.attr( 'title', o_title );
	            $product_link
	            	.attr( 'href', o_href );
	        }

	        
	       
	        var $single_variation_wrap = $variation_form.find('.single_variation_wrap');

	        if ( variation.sku )
	        	 $product.find('.product_meta').find('.sku').text( variation.sku );
	        else
	        	 $product.find('.product_meta').find('.sku').text('');

	        $single_variation_wrap.find('.quantity').show();
	        
	        if ( ! variation.is_in_stock && ! variation.backorders_allowed ) {
		        $variation_form.find('.variations_button').hide();
	        }
	        
	        if ( variation.min_qty )
	        	$single_variation_wrap.find('input[name=quantity]').attr( 'data-min', variation.min_qty ).val( variation.min_qty );
	        else
	        	$single_variation_wrap.find('input[name=quantity]').removeAttr('data-min');

	        if ( variation.max_qty )
	        	$single_variation_wrap.find('input[name=quantity]').attr('data-max', variation.max_qty);
	        else
	        	$single_variation_wrap.find('input[name=quantity]').removeAttr('data-max');

	        if ( variation.is_sold_individually == 'yes' ) {
	        	$single_variation_wrap.find('input[name=quantity]').val('1');
	        	$single_variation_wrap.find('.quantity').hide();
	        }

	        $single_variation_wrap.slideDown('200').trigger( 'show_variation', [ variation ] );

		} );

	/**
	 * Initial states and loading
	 */
	$('form.variations_form .variations input:radio').change();


	/**
	 * Helper functions for variations
	 */

    // Search for matching variations for given set of attributes
    function find_matching_variations(product_variations,settings ) {

		    var matching = [];
        for (var i = 0; i < product_variations.length; i++) {
        	var variation = product_variations[i];
        	var variation_id = variation.variation_id;
			    
					
					
			if (variations_match( variation.attributes, settings ) ) {
			    
				   matching.push(variation);
			     var value,valtxt='';
					 for (var key in variation.attributes) {
						  valtxt += variation.attributes[key]+" ";
							
						}
						
					 if(temp==1)//for when page load
					 {	
						
						 $('.variations').find('tr').find('input[type=radio]').attr('name');
						 
						 temp=0;
						 $('.variations').find('tr').each(function(){
            	  for (var i=0;i< product_variations.length;i++)
								{
							//		$('input[value='+(variation.attributes[key]).toUpperCase()+']').prop('checked',true);  				
								}
						    $('input[value='+(variation.attributes[key]).toUpperCase()+']').prop('checked',true);
            
             });
					 }
           
					  $('.variation_image').attr('src',variation.image_src);
		        $('#prodtitle').text($('#prodtitle').attr('title')+" "+valtxt);
						$('#sku').text(variation.sku);
					  $('#price').html((variation.price_html));
						$('#addtocart').val(variation.variation_id);
 				    
								
          }
         
         
         
        }
       
      
        return matching;
    }

	// Check if two arrays of attributes match
    function variations_match( attrs1, attrs2 ) {
			  var match = true;
        for ( attr_name in attrs1 ) {
			      var val1 = attrs1[ attr_name ];
            var val2 = attrs2[ attr_name ];
              
						 if(val1 !== undefined && val2 !== undefined)
						 {
						   val1 = attrs1[ attr_name ].toUpperCase();
               val2 = attrs2[ attr_name ].toUpperCase();
           	 
						 }
				
            if ( val1 !== undefined && val2 !== undefined && val1.length != 0 && val2.length != 0 && val1 != val2 ) {
                match = false;
            }
        }
     
        return match;
    }
    
   $('.single_add_to_cart_button').click(function(){
          	   $('.set-aqy').val(jQuery('.quantity.buttons_added').find('.qty').val());
		 
	           });

});
